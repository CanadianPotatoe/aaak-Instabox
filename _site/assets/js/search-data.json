{
  
    
        "post0": {
            "title": "Bathroom pass",
            "content": "Pass A101 Pass . Name: Choose Location: Bathroom Health Office Library Teacher&#39;s Signature: Clear Submit Randomize Color Name: . Date &amp; time: . Teacher&#39;s Signature: . Good job not using any paper! You&#39;re saving both the environment and your seed &#128585;! .",
            "url": "http://localhost:4100/flocker_frontend/bathroom/2024/09/19/bathroom_pass.html",
            "relUrl": "/bathroom/2024/09/19/bathroom_pass.html",
            "date": " • Sep 19, 2024"
        }
        
    
  
    
        ,"post1": {
            "title": "Playing with Jupyter Notebooks and Python",
            "content": "Python and Jupyter Notebooks . Python is a highly versatile and widely-used programming language, renowned for its readability and broad library support. Jupyter Notebooks, on the other hand, is an interactive computing environment that enables users to create and share documents containing live code, equations, visualizations, and narrative text. Together, they form a powerful toolkit for data analysis, scientific research, and educational purposes. . We will play with Python and Jupyter Notebooks to get a feel for both. This is a great interactive way to start development. . Emoji Print . It is easy to add an emoji to a message in code. However, using the emoji library or other libraries often requires you to install code on your machine. Before using a library, that is not part of Python distribution, you must install with pip . # terminal command to install library $ pip install emoji Collecting emoji Downloading emoji-2.5.1.tar.gz (356 kB) ... Successfully installed emoji-2.5.1 . #!pip install emoji from emoji import emojize print(emojize(&quot;:thumbs_up: Python is awesome! :grinning_face:&quot;)) . Extracting Data . Web sites become a lot more interesting when you are working with data, not trying to create it. Here is some code using a library called newspaper, this extracts a couple of writeups from the CNN Entertainment site. . Learn more on newspaper3k | Learn about library for wikipedia | . #!pip install newspaper3k from newspaper import Article from IPython.display import display, Markdown urls = [&quot;http://cnn.com/2023/03/29/entertainment/the-mandalorian-episode-5-recap/index.html&quot;, &quot;https://www.cnn.com/2023/06/09/entertainment/jurassic-park-anniversary/index.html&quot;] for url in urls: article = Article(url) article.download() article.parse() # Jupyter Notebook Display # print(article.title) display(Markdown(article.title)) # Jupyter display only display(Markdown(article.text)) # Jupyter display only print(&quot; n&quot;) . #!pip install wikipedia import wikipedia from IPython.display import display, Markdown # add for Jupyter terms = [&quot;Python (programming language)&quot;, &quot;JavaScript&quot;] for term in terms: # Search for a page result = wikipedia.search(term) # Get the summary of the first result summary = wikipedia.summary(result[0]) print(term) # print(summary) # console display display(Markdown(summary)) # Jupyter display . Inspecting a Function . The inspect module can give you the output of what’s inside many Python functions/objects. This can help you explore code behind what you are using. . Inspect documentation. | . import inspect from newspaper import Article # inspect newspaper Article function print(inspect.getsource(Article)) . Python Data Types . Dynamic typing means that the type of the variable is determined only during runtime. Strong typing means that variables do have a type and that the type matters when performing operations. In the illustration below there are two functions . mean… shows types required prior to calling average function | average, average2… calculates the average of a list of numbers | . Python has types. In the language you can use type hints, but most coders do not use them. In other languages like Java and ‘C’ you must specify types. . Python Types Cheat Sheet | . import sys from typing import Union # Define types for mean function, trying to analyze input possibilities Number = Union[int, float] # Number can be either int or float type Numbers = list[Number] # Numbers is a list of Number types Scores = Union[Number, Numbers] # Scores can be single or multiple def mean(scores: Scores, method: int = 1) -&gt; float: &quot;&quot;&quot; Calculate the mean of a list of scores. Average and Average2 are hidden functions performing mean algorithm If a single score is provided in scores, it is returned as the mean. If a list of scores is provided, the average is calculated and returned. &quot;&quot;&quot; def average(scores): &quot;&quot;&quot;Calculate the average of a list of scores using a Python for loop with rounding.&quot;&quot;&quot; sum = 0 len = 0 for score in scores: if isinstance(score, Number): sum += score len += 1 else: print(&quot;Bad data: &quot; + str(score) + &quot; in &quot; + str(scores)) sys.exit() return sum / len def average2(scores): &quot;&quot;&quot;Calculate the average of a list of scores using the built-in sum() function with rounding.&quot;&quot;&quot; return sum(scores) / len(scores) # test to see if scores is a list of numbers if isinstance(scores, list): if method == 1: # long method result = average(scores) else: # built in method result = average2(scores) return round(result + 0.005, 2) return scores # case where scores is a single valu # try with one number singleScore = 100 print(&quot;Print test data: &quot; + str(singleScore)) # concat data for single line print(&quot;Mean of single number: &quot; + str(mean(singleScore))) print() # define a list of numbers testScores = [90.5, 100, 85.4, 88] print(&quot;Print test data: &quot; + str(testScores)) print(&quot;Average score, loop method: &quot; + str(mean(testScores))) print(&quot;Average score, function method: &quot; + str(mean(testScores, 2))) print() badData = [100, &quot;NaN&quot;, 90] print(&quot;Print test data: &quot; + str(badData)) print(&quot;Mean with bad data: &quot; + str(mean(badData))) . Hacks . Here is a summary of some of the things learned above. . Formatting messages with emoji | Exploring data with newspaper and wikipedia libraries | Finding code on how the library we used was made | Learning about data types while writing an algorithm for mean | . Part of Project Based learning is the idea of combining concepts to form something more interesting. Make a plan, form some ideas, brainstorm ideas with pair. Produce something that is interesting and challenging. Samples… . Could I get input from user to look up wikipedia information? Python input, Article on Input | What could I learn in Python about Stats to get Machine Learning Read? Stats Calculations | Could I add emoji to an extracted article? String Find, String Methods | .",
            "url": "http://localhost:4100/flocker_frontend/jupyter/notebook/python",
            "relUrl": "/jupyter/notebook/python",
            "date": " • Aug 23, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Readme",
          "content": "Introduction . Nighthawk Pages is a project designed to support students in their Computer Science and Software Engineering education. It offers a wide range of resources including tech talks, code examples, and educational blogs. . GitHub Pages can be customized by the blogger to support computer science learnings as the student works through the pathway of using Javascript, Python/Flask, Java/Spring. . Student Requirements . Del Norte HS students will be required to review their personal GitHub Pages at each midterm and final. This review will contain a compilation of personal work performed within each significant grading period. . In general, Students and Teachers are expected to use GitHub pages to build lessons, complete classroom hacks, perform work on JavaScript games, and serve as a frontend to full-stack applications. . Exchange of information could be: . sharing a file: `wget “raw-link.ipynb” | creating a template from this repository | sharing a fork among team members | etc. | . History . This project is in its 3rd revision (aka 3.0). . The project was initially based on Fastpages. But this project has diverged from those roots into an independent entity. The decision to separate from Fastpages was influenced by the deprecation of Fastpages by authors. It is believed by our community that the authors of fastpages turned toward Quatro. After that change of direction fastpages did not align with the Teacher’s goals and student needs. The Nighthawk Pages project has more of a raw development blogging need. . License . The Apache license has its roots in Fastpages. Thus, it carries its license forward. However, most of the code is likely unrecognizable from those roots. . Key Features . Code Examples: Provides practical coding examples in JavaScript, including a platformer game, and frontend code for user databases using Python and Java backends. | Educational Blogs: Offers instructional content on various topics such as developer tools setup, deployment on AWS, SQL databases, machine learning, and data structures. It utilizes Jupyter Notebooks for interactive lessons and coding challenges. | Tools and Integrations: Features GitHub actions for blog publishing, Utterances for blog commenting, local development support via Makefile and scripts, and styling with the Minima Theme and SASS. It also includes a new integration with GitHub Projects and Issues. | . Contributions . Notable Contributions: Highlights significant contributions to the project, including theme development, search and tagging functionality, GitHub API integration, and the incorporation of GitHub Projects into GitHub pages. Contributors such as Tirth Thakker, Mirza Beg, and Toby Ledder have played crucial roles in these developments. . | Blog Contributions: Often students contribute articles and blogs to this project. Their names are typically listed in the front matter of their contributing post. . | . . GitHub Pages setup . The absolutes in setup up… . Activate GitHub Pages Actions: This step involves enabling GitHub Pages Actions for your project. By doing so, your project will be automatically deployed using GitHub Pages Actions, ensuring that your project is always up to date with the latest changes you push to your repository. . On the GitHub website for the repository go to the menu: Settings -&gt; Pages -&gt;Build | Under the Deployment location on the page, select “GitHub Actions”. | . Update _config.yml: You need to modify the _config.yml file to reflect your repository’s name. This configuration is crucial because it ensures that your project’s styling is correctly applied, making your deployed site look as intended rather than unstyled or broken. . github_repo: &quot;portfolio_2025&quot; baseurl: &quot;/portfolio_2025&quot; . Set Repository Name in Makefile: Adjust the REPO_NAME variable in your Makefile to match your GitHub repository’s name. This action facilitates the automatic updating of posts and notebooks on your local development server, improving the development process. . # Configuration, override port with usage: make PORT=4200 PORT ?= 4100 REPO_NAME ?= portfolio_2025 LOG_FILE = /tmp/jekyll$(PORT).log . Tool requirements . All GitHub Pages websites are managed on GitHub infrastructure and use GitHub version control. Each time we change files in GitHub it initiates a GitHub Action, a continuous integration and development toolset, that rebuilds and publishes the site with Jekyll. . GitHub uses Jekyll to transform your markdown and HTML content into static websites and blogs. Jekyll. | A Linux shell is required to work with this project integration with GitHub Pages, GitHub and VSCode. Ubuntu is the preferred shell, though MacOS shell is supported as well. There will be some key setup scripts that follow in the README. | Visual Studio Code is the Nighthawk Pages author’s preferred code editor and extensible development environment. VSCode has a rich ecosystem of developer extensions that ease working with GitHub Pages, GitHub, and many programming languages. Setting up VSCode and extensions will be elaborated upon in this document. | An anatomy section in this README will describe GitHub Pages and conventions that are used to organize content and files. This includes file names, key coding files, metadata tagging of blogs, styling tooling for blogs, etc. | . Development Environment Setup . Comprehensive start. A topic-by-topic guide to getting this project running is published here. . Quick start. A quick start below is a reminder, but is dependent on your knowledge. Only follow this instruction if you need a refresher. Always default to the comprehensive start if any problem occurs. . Clone Repo . Run these commands to obtain the project, then locate into the project directory with the terminal, install an extensive set of tools, and make. . git clone &lt;this-repo&gt; # git clone https://github.com/nighthawkcoders/portfolio_2025.git cd &lt;repo-dir&gt;/scripts # cd portfolio_2025 . Windows WSL and/or Ubuntu Users . Execute the script: ./activate_ubuntu.sh | . macOS Users . Execute the script: ./activate_macos.sh | . Kasm Cloud Desktop Users . Execute the script: ./activate.sh | . Run Server on localhost . To preview the project you will need to “make” the project. . Bundle install . The very first time you clone run project you will need to run this Ruby command as the final part of your setup. . bundle install . Start the Server . This requires running terminal commands make, make stop, make clean, or make convert to manage the running server. Logging of details will appear in the terminal. A Makefile has been created in the project to support commands and start processes. . Start the server, this is the best choice for initial and iterative development. Note. after the initial make, you should see files automatically refresh in the terminal on VSCode save. . make . Load web application into the Browser . Start the preview server in the terminal, The terminal output from make shows the server address. “Cmd” or “Ctl” click the http location to open the preview server in a browser. Here is an example Server address message, click on the Server address to load:… . http://0.0.0.0:4100/portfolio_2025/ . Regeneration of web application . Save on “.ipynb” or “.md” file activiates “regeneration”. An example terminal message is below. Refresh the browser to see updates after the message displays. . Regenerating: 1 file(s) changed at 2023-07-31 06:54:32 _notebooks/2024-01-04-cockpit-setup.ipynb . Other “make” commands . Terminal messages are generated from background processes. At any time, click return or enter in a terminal window to obtain a prompt. Once you have the prompt you can use the terminal as needed for other tasks. Always return to the root of project cd ~/vscode/portfolio_2025 for all “make” actions. . Stop the preview server . Stopping the server ends the web server applications running process. However, it leaves constructed files in the project in a ready state for the next time you run make. . make stop . Clean the local web application environment . This command will top the server and “clean” all previously constructed files (ie .ipynb -&gt; .md). This is the best choice when renaming files has created duplicates that are visible when previewing work. . make clean . Observe build errors . Test Jupyter Notebook conversions (ie .ipynb -&gt; .md), this is the best choice to see if an IPYNB conversion error is occurring. . make convert . . Development Support . File Names in “_posts”, “_notebooks” . There are two primary directories for creating blogs. The “_posts” directory is for authoring in markdown only. The “_notebooks” allows for markdown, pythons, javascript and more. . To name a file, use the following structure (If dates are in the future, review your config.yml setting if you want them to be viewed). Review these naming conventions. . For markdown files in _posts: year-month-day-fileName.md GOOD EXAMPLE: 2021-08-02-First-Day.md | BAD EXAMPLE: 2021-8-2-first-day.md | BAD EXAMPLE: first-day.md | BAD EXAMPLE: 2069-12-31-First-Day.md | . | . | For Jupyter notebooks in _notebooks: year-month-day-fileName.ipynb GOOD EXAMPLE: 2021-08-02-First-Day.ipynb | BAD EXAMPLE: 2021-8-2-first-day.ipynb | BAD EXAMPLE: first-day.ipynb | BAD EXAMPLE: 2069-12-31-First-Day.ipynb | . | . | . Tags . Tags are used to organize pages by their tag the way to add tags is to add the following to your front matter such as the example seen here categories: [Tools] Each item in the same category will be lumped together to be seen easily on the search page. . Search . All pages can be searched for using the built-in search bar. This search bar will search for any word in the title of a page or in the page itself. This allows for easily finding pages and information that you are looking for. However, sometimes this may not be desirable so to hide a page from the search you need to add search_exclude: true to the front matter of the page. This will hide the page from appearing when the viewer uses search. . Navigation Bar . To add pages to the top navigation bar use _config.yml to order and determine which menus you want and how to order them. Review the_config.yml in this project for an example. . Blog Page . There is a blog page that has options for images and a description of the page. This page can help the viewer understand what the page is about and what they can expect to find on the page. The way to add images to a page is to have the following front matter image: /images/file.jpg and then the name of the image that you want to use. The image must be in the images folder. Furthermore, if you would like the file to not show up on the blog page hide: true can be added to the front matter. . SASS support . NIGHTHAWK Pages support a variety of different themes that are each overlaid on top of minima. To use each theme, go to the “_sass/minima/custom-styles.scss” file and simply comment or uncomment the theme you want to use. . To learn about the minima themes search for “GitHub Pages minima” and review the README. . To find a new theme search for “Github Pages Themes”. . Includes . Nighthawk Pages uses liquid syntax to import many common page elements that are present throughout the repository. These common elements are imported from the _includes directory. If you want to add one of these common elements, use liquid syntax to import the desired element to your file. Here’s an example of the liquid syntax used to import: `&lt;h3&gt; . &lt;/a&gt; . | . &lt;/h3&gt;&lt;p class=&quot;post-meta&quot;&gt;&lt;/p&gt; ` Note that the liquid syntax is surrounded by curly braces and percent signs. This can be used anywhere in the repository. . Layouts . To use or create a custom page layout, make an HTML page inside the _layouts directory, and when you want to use that layout in a file, use the following front matter layout: [your layout here]. All layouts will be written in liquid to define the structure of the page. | . Metadata . Metadata, also known as “front matter”, is a set of key-value pairs that can provide additional information to GitHub Pages about .md and .ipynb files. This can and probably will be used in other file types (ie doc, pdf) if we add them to the system. . In the front matter, you can also define things like a title and description for the page. Additional front matter is defined to place content on the “Computer Science Lab Notebook” page. The courses: key will place data on a specific page with the nested week: placing data on a specific row on the page. The type: key in “front matter” will place the blog under the plans, hacks(ToDo), and tangibles columns. . In our files, the front matter is defined at the top of the page or the first markdown cell. . First, open one of the .md or .ipynb files already included in either your _posts | _notebooks folder. | . | In the .md file, you should notice something similar to this at the top of the page. To see this in your .ipynb files you will need to double-click the markdown cell at the top of the file. | . toc: true comments: true layout: post title: Jupyter Python Sample description: Example Blog!!! This shows code and notes from hacks. type: ccc courses: { csa: {week: 5} } . | The front matter will always have ‘—’ at the top and bottom to distinguish it and each key-value pair will be separated by a ‘:’. . | Here we can modify things like the title and description. . | The type value will tell us which column this is going to appear under the time box supported pages. The “ccc” stands for Code, Code, Code. . | The courses will tell us which menu item it will be under, in this case, the csa menu, and the week tells it what row (week) it will appear under that menu. . | .",
          "url": "http://localhost:4100/flocker_frontend/README4YML.html",
          "relUrl": "/README4YML.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About",
          "content": "As a conversation Starter . Here are some places I have lived. . Flags are made using Wikipedia images Journey through Life . Here is what I did at those places . 🏫 Lots of Elementary Schools in Tucson, LA, Honolulu, and Glendale (CA) | 🏫 Middle and High School in Glendale (CA), Hoover High graduated ‘77 | 🎓 Glendale CA Community College, UCLA Extension, LA Wilshire Computer Tech School ‘77 to ‘79 | ⛪ England, London Missionary for Church of Jesus Christ of Latter-day Saints ‘79 to ‘81 | 💼 Culver City, Glendale CA founder at Ashton-Tate, original PC’s dBase 2 and 3 ‘82 to ‘87 | 🎓 Eugene Oregon Undergraduate CompSci Degree at University of Oregon (Go Ducks!) ‘89 to ‘91 | 💼 Eugene Oregon, founder and owner @ Microniche `88, Point Control CAD CAM developer ‘91 to ‘96 | 🏢 San Diego CA Qualcomm, Satellite Comm and 1st Mobile OS (BREW) ‘96 to ‘19 | 👨‍🏫 San Diego CA Teacher of Computer Science @ Del Norte High School San Diego ‘19 to present | . Culture, Family, and Fun . Everything for me, as for many others, revolves around family and faith. . My mother told me that I was Danish, English. and Irish, here is my researched family tree | My family is pretty big as I have been married twice, my 1st wife passed away. We have had 5 kids, 4 adopted by me, 1 biological. Plus, there are three grandkids. My name to my grandkids is Abuilito. | The gallery of pics has some of my family, fun, culture and faith memories. | . Gallery of Pics, scroll to the right for more ...",
          "url": "http://localhost:4100/flocker_frontend/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  

  

  

  

  

  
      ,"page11": {
          "title": "My Space",
          "content": "",
          "url": "http://localhost:4100/flocker_frontend/",
          "relUrl": "/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  

  

  
  

  
  

  
      ,"page21": {
          "title": "Kasm Design Subsection in Portfolio 2025",
          "content": "Kasm Design Subsection in Portfolio 2025 . The Kasm Design subection is a place for all the images and branding to be stored and updated without the background configuration on the Kasm webapp. The logo/ folder contains all iterations and positions of the Kasm logo, including the .ico file. These are then copied to the current_branding_config folder, where the names should be: . Branding Option Filename to Name Image . Favicon | favicon.ico | . Header Logo | header.png | . Launcher Background | background.jpg | . Login Logo | loginlogo.png | . Login Splash Background | loginbackground.png | . If these images are not in the right format, they must be converted, as it is critical to the branding configuration. Anytime you want to change an image, you just replace the image while keeping the same filename, and it will update on the Kasm web client. .",
          "url": "http://localhost:4100/flocker_frontend/kasm_design/note.html",
          "relUrl": "/kasm_design/note.html",
          "date": ""
      }
      
  

  
      ,"page22": {
          "title": "Implementation Notes for Internationalization of Jupyter Notebook",
          "content": "Implementation Notes for Internationalization of Jupyter Notebook . The implementation of i18n features for jupyter notebook is still a work-in-progress: . User interface strings are (mostly) handled | Console messages are not handled (their usefulness in a translated environment is questionable) | Tooling has to be refined | . However… . How the language is selected ? . jupyter notebook command reads the LANG environment variable at startup, (xx_XX or just xx form, where xx is the language code you’re wanting to run in). | Hint: if running Windows, you can set it in PowerShell with ${Env:LANG} = &quot;xx_XX&quot;. if running Ubuntu 14, you should set environment variable LANGUAGE=&quot;xx_XX&quot;. . The preferred language for web pages in your browser settings (xx) is also used. At the moment, it has to be first in the list. | Contributing and managing translations . Requirements . pybabel (could be installed pip install babel) | po2json (could be installed with npm install -g po2json) | . All i18n-related commands are done from the related directory : . cd notebook/i18n/ . Message extraction . The translatable material for notebook is split into 3 .pot files, as follows: . notebook/i18n/notebook.pot - Console and startup messages, basically anything that is produced by Python code. | notebook/i18n/nbui.pot - User interface strings, as extracted from the Jinja2 templates in notebook/templates/*.html | noteook/i18n/nbjs.pot - JavaScript strings and dialogs, which contain much of the visible user interface for Jupyter notebook. | . To extract the messages from the source code whenever new material is added, use the pybabel command: . pybabel extract -F babel_notebook.cfg -o notebook.pot --no-wrap --project Jupyter . pybabel extract -F babel_nbui.cfg -o nbui.pot --no-wrap --project Jupyter . pybabel extract -F babel_nbjs.cfg -o nbjs.pot --no-wrap --project Jupyter . . After this is complete you have 3 .pot files that you can give to a translator for your favorite language. . Messages compilation . After the source material has been translated, you should have 3 .po files with the same base names as the .pot files above. Put them in notebook/i18n/${LANG}/LC_MESSAGES, where ${LANG} is the language code for your desired language ( i.e. German = “de”, Japanese = “ja”, etc. ). . notebook.po and nbui.po need to be converted from .po to .mo format for use at runtime. . pybabel compile -D notebook -f -l ${LANG} -i ${LANG}/LC_MESSAGES/notebook.po -o ${LANG}/LC_MESSAGES/notebook.mo pybabel compile -D nbui -f -l ${LANG} -i ${LANG}/LC_MESSAGES/nbui.po -o ${LANG}/LC_MESSAGES/nbui.mo . nbjs.po needs to be converted to JSON for use within the JavaScript code, with po2json, as follows: . po2json -p -F -f jed1.x -d nbjs ${LANG}/LC_MESSAGES/nbjs.po ${LANG}/LC_MESSAGES/nbjs.json . When new languages get added, their language codes should be added to notebook/i18n/nbjs.json under the supported_languages element. . Tips for Jupyter developers . The biggest “mistake” I found while doing i18n enablement was the habit of constructing UI messages from English “piece parts”. For example, code like: . var msg = &quot;Enter a new &quot; + type + &quot;name:&quot;; . where type is either “file”, “directory”, or “notebook”…. . is problematic when doing translations, because the surrounding text may need to vary depending on the inserted word. In this case, you need to switch it and use complete phrases, as follows: . var rename_msg = function (type) { switch (type) { case &quot;file&quot;: return _(&quot;Enter a new file name:&quot;); case &quot;directory&quot;: return _(&quot;Enter a new directory name:&quot;); case &quot;notebook&quot;: return _(&quot;Enter a new notebook name:&quot;); default: return _(&quot;Enter a new name:&quot;); } }; . Also you need to remember that adding an “s” or “es” to an English word to create the plural form doesn’t translate well. Some languages have as many as 5 or 6 different plural forms for differing numbers, so using an API such as ngettext() is necessary in order to handle these cases properly. . Known issues and future evolutions . Right now there are two different places where the desired language is set. At startup time, the Jupyter console’s messages pay attention to the setting of the ${LANG} environment variable as set in the shell at startup time. Unfortunately, this is also the time where the Jinja2 environment is set up, which means that the template stuff will always come from this setting. We really want to be paying attention to the browser’s settings for the stuff that happens in the browser, so we need to be able to retrieve this information after the browser is started and somehow communicate this back to Jinja2. So far, I haven’t yet figured out how to do this, which means that if the ${LANG} at startup doesn’t match the browser’s settings, you could potentially get a mix of languages in the UI ( never a good thing ). . | We will need to decide if console messages should be translatable, and enable them if desired. . | The keyboard shortcut editor was implemented after the i18n work was completed, so that portion does not have translation support at this time. . | Babel’s documentation has instructions on how to integrate messages extraction into your setup.py so that eventually we can just do: . ./setup.py extract_messages . | I hope to get this working at some point in the near future. 5. The conversions from .po to .mo probably can and should be done using setup.py install. . Any questions or comments please let me know @JCEmmons on github (emmo@us.ibm.com) .",
          "url": "http://localhost:4100/flocker_frontend/venv/lib/python3.12/site-packages/jupyter_server/i18n/",
          "relUrl": "/venv/lib/python3.12/site-packages/jupyter_server/i18n/",
          "date": ""
      }
      
  

  
      ,"page23": {
          "title": "README FIRST",
          "content": "README FIRST . Please do not add new templates for nbconvert here. . In order to speed up the distribution of nbconvert templates and make it simpler to share such contributions, we encourage sharing those links on our wiki page. .",
          "url": "http://localhost:4100/flocker_frontend/venv/lib/python3.12/site-packages/nbconvert/templates/",
          "relUrl": "/venv/lib/python3.12/site-packages/nbconvert/templates/",
          "date": ""
      }
      
  

  
      ,"page24": {
          "title": "Template skeleton",
          "content": "Template skeleton . This directory contains the template skeleton files. . Do not modify the contents of the ../latex/skeleton folder. Instead, if you need to, make modifications to the files in this folder and then run make to generate the corresponding latex skeleton files in the ../latex/skeleton folder. . If you would like to share your resulting templates with others, we encourage sharing those links on our wiki page. .",
          "url": "http://localhost:4100/flocker_frontend/venv/lib/python3.12/site-packages/nbconvert/templates/skeleton/",
          "relUrl": "/venv/lib/python3.12/site-packages/nbconvert/templates/skeleton/",
          "date": ""
      }
      
  

  
      ,"page25": {
          "title": "",
          "content": "PyZMQ’s CFFI support is designed only for (Unix) systems conforming to have_sys_un_h = True. .",
          "url": "http://localhost:4100/flocker_frontend/venv/lib/python3.12/site-packages/zmq/backend/cffi/",
          "relUrl": "/venv/lib/python3.12/site-packages/zmq/backend/cffi/",
          "date": ""
      }
      
  

  
      ,"page26": {
          "title": "Implementation Notes for Internationalization of Jupyter Notebook",
          "content": "Implementation Notes for Internationalization of Jupyter Notebook . The implementation of i18n features for jupyter notebook is still a work-in-progress: . User interface strings are (mostly) handled | Console messages are not handled (their usefulness in a translated environment is questionable) | Tooling has to be refined | . However… . How the language is selected ? . jupyter notebook command reads the LANG environment variable at startup, (xx_XX or just xx form, where xx is the language code you’re wanting to run in). | Hint: if running Windows, you can set it in PowerShell with ${Env:LANG} = &quot;xx_XX&quot;. if running Ubuntu 14, you should set environment variable LANGUAGE=&quot;xx_XX&quot;. . The preferred language for web pages in your browser settings (xx) is also used. At the moment, it has to be first in the list. | Contributing and managing translations . Requirements . pybabel (could be installed pip install babel) | po2json (could be installed with npm install -g po2json) | . All i18n-related commands are done from the related directory : . cd notebook/i18n/ . Message extraction . The translatable material for notebook is split into 3 .pot files, as follows: . notebook/i18n/notebook.pot - Console and startup messages, basically anything that is produced by Python code. | notebook/i18n/nbui.pot - User interface strings, as extracted from the Jinja2 templates in notebook/templates/*.html | noteook/i18n/nbjs.pot - JavaScript strings and dialogs, which contain much of the visible user interface for Jupyter notebook. | . To extract the messages from the source code whenever new material is added, use the pybabel command: . pybabel extract -F babel_notebook.cfg -o notebook.pot --no-wrap --project Jupyter . pybabel extract -F babel_nbui.cfg -o nbui.pot --no-wrap --project Jupyter . pybabel extract -F babel_nbjs.cfg -o nbjs.pot --no-wrap --project Jupyter . . After this is complete you have 3 .pot files that you can give to a translator for your favorite language. . Messages compilation . After the source material has been translated, you should have 3 .po files with the same base names as the .pot files above. Put them in notebook/i18n/${LANG}/LC_MESSAGES, where ${LANG} is the language code for your desired language ( i.e. German = “de”, Japanese = “ja”, etc. ). . notebook.po and nbui.po need to be converted from .po to .mo format for use at runtime. . pybabel compile -D notebook -f -l ${LANG} -i ${LANG}/LC_MESSAGES/notebook.po -o ${LANG}/LC_MESSAGES/notebook.mo pybabel compile -D nbui -f -l ${LANG} -i ${LANG}/LC_MESSAGES/nbui.po -o ${LANG}/LC_MESSAGES/nbui.mo . nbjs.po needs to be converted to JSON for use within the JavaScript code, with po2json, as follows: . po2json -p -F -f jed1.x -d nbjs ${LANG}/LC_MESSAGES/nbjs.po ${LANG}/LC_MESSAGES/nbjs.json . When new languages get added, their language codes should be added to notebook/i18n/nbjs.json under the supported_languages element. . Tips for Jupyter developers . The biggest “mistake” I found while doing i18n enablement was the habit of constructing UI messages from English “piece parts”. For example, code like: . var msg = &quot;Enter a new &quot; + type + &quot;name:&quot;; . where type is either “file”, “directory”, or “notebook”…. . is problematic when doing translations, because the surrounding text may need to vary depending on the inserted word. In this case, you need to switch it and use complete phrases, as follows: . var rename_msg = function (type) { switch (type) { case &quot;file&quot;: return _(&quot;Enter a new file name:&quot;); case &quot;directory&quot;: return _(&quot;Enter a new directory name:&quot;); case &quot;notebook&quot;: return _(&quot;Enter a new notebook name:&quot;); default: return _(&quot;Enter a new name:&quot;); } }; . Also you need to remember that adding an “s” or “es” to an English word to create the plural form doesn’t translate well. Some languages have as many as 5 or 6 different plural forms for differing numbers, so using an API such as ngettext() is necessary in order to handle these cases properly. . Known issues and future evolutions . Right now there are two different places where the desired language is set. At startup time, the Jupyter console’s messages pay attention to the setting of the ${LANG} environment variable as set in the shell at startup time. Unfortunately, this is also the time where the Jinja2 environment is set up, which means that the template stuff will always come from this setting. We really want to be paying attention to the browser’s settings for the stuff that happens in the browser, so we need to be able to retrieve this information after the browser is started and somehow communicate this back to Jinja2. So far, I haven’t yet figured out how to do this, which means that if the ${LANG} at startup doesn’t match the browser’s settings, you could potentially get a mix of languages in the UI ( never a good thing ). . | We will need to decide if console messages should be translatable, and enable them if desired. . | The keyboard shortcut editor was implemented after the i18n work was completed, so that portion does not have translation support at this time. . | Babel’s documentation has instructions on how to integrate messages extraction into your setup.py so that eventually we can just do: . ./setup.py extract_messages . | I hope to get this working at some point in the near future. 5. The conversions from .po to .mo probably can and should be done using setup.py install. . Any questions or comments please let me know @JCEmmons on github (emmo@us.ibm.com) .",
          "url": "http://localhost:4100/flocker_frontend/venv/lib64/python3.12/site-packages/jupyter_server/i18n/",
          "relUrl": "/venv/lib64/python3.12/site-packages/jupyter_server/i18n/",
          "date": ""
      }
      
  

  
      ,"page27": {
          "title": "README FIRST",
          "content": "README FIRST . Please do not add new templates for nbconvert here. . In order to speed up the distribution of nbconvert templates and make it simpler to share such contributions, we encourage sharing those links on our wiki page. .",
          "url": "http://localhost:4100/flocker_frontend/venv/lib64/python3.12/site-packages/nbconvert/templates/",
          "relUrl": "/venv/lib64/python3.12/site-packages/nbconvert/templates/",
          "date": ""
      }
      
  

  
      ,"page28": {
          "title": "Template skeleton",
          "content": "Template skeleton . This directory contains the template skeleton files. . Do not modify the contents of the ../latex/skeleton folder. Instead, if you need to, make modifications to the files in this folder and then run make to generate the corresponding latex skeleton files in the ../latex/skeleton folder. . If you would like to share your resulting templates with others, we encourage sharing those links on our wiki page. .",
          "url": "http://localhost:4100/flocker_frontend/venv/lib64/python3.12/site-packages/nbconvert/templates/skeleton/",
          "relUrl": "/venv/lib64/python3.12/site-packages/nbconvert/templates/skeleton/",
          "date": ""
      }
      
  

  
      ,"page29": {
          "title": "",
          "content": "PyZMQ’s CFFI support is designed only for (Unix) systems conforming to have_sys_un_h = True. .",
          "url": "http://localhost:4100/flocker_frontend/venv/lib64/python3.12/site-packages/zmq/backend/cffi/",
          "relUrl": "/venv/lib64/python3.12/site-packages/zmq/backend/cffi/",
          "date": ""
      }
      
  

}